<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Alessandro Bolletta</title><link>https://alexpacio.github.io/</link><description>This is the personal website for Alessandro.</description><atom:link href="https://alexpacio.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="mailto:alexpacio91 at gmail dot com"&gt;Alessandro Bolletta&lt;/a&gt; </copyright><lastBuildDate>Thu, 10 Oct 2024 18:08:41 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Building a Lightweight Node.js Background Job Scheduler: A Practical Solution for Simple Web Applications</title><link>https://alexpacio.github.io/posts/lightweight-nodejs-background-job-scheduler/</link><dc:creator>Alessandro Bolletta</dc:creator><description>&lt;section id="building-a-lightweight-node-js-background-job-scheduler"&gt;
&lt;h2&gt;Building a Lightweight Node.js Background Job Scheduler&lt;/h2&gt;
&lt;p&gt;As developers, we often come across situations where a fully-fledged background job system, with all its bells and whistles, might be overkill for our project needs. This was the case for me when I built a custom background job scheduler in &lt;strong&gt;TypeScript&lt;/strong&gt; and &lt;strong&gt;Node.js&lt;/strong&gt;, designed to handle essential tasks without the overhead of larger, more complex solutions.&lt;/p&gt;
&lt;section id="the-need-for-a-simple-solution"&gt;
&lt;h3&gt;The Need for a Simple Solution&lt;/h3&gt;
&lt;p&gt;My project involved a web application that required periodic background tasks, such as &lt;strong&gt;data synchronization&lt;/strong&gt;, &lt;strong&gt;cleanup jobs&lt;/strong&gt;, and &lt;strong&gt;basic system monitoring&lt;/strong&gt;. While there are many mature background job frameworks available, most were too feature-heavy for what I needed. I wanted something small, efficient, and easy to integrate into my Docker-based setup, without introducing unnecessary complexity.&lt;/p&gt;
&lt;p&gt;That’s when I decided to write my own scheduler—lean, concise, and perfect for simple backend apps or as a side container to complement larger web applications.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-custom-scheduler-small-but-effective"&gt;
&lt;h3&gt;The Custom Scheduler: Small but Effective&lt;/h3&gt;
&lt;p&gt;The goal was to create a &lt;strong&gt;minimalistic background job scheduler&lt;/strong&gt; that could be easily run in a Docker container alongside the main web application. Written in &lt;strong&gt;TypeScript&lt;/strong&gt; and &lt;strong&gt;Node.js&lt;/strong&gt;, the solution is focused purely on executing periodic tasks with the least amount of code possible, while ensuring it’s flexible enough to be extended for future needs.&lt;/p&gt;
&lt;p&gt;Unlike robust job schedulers like &lt;strong&gt;Bull&lt;/strong&gt; or &lt;strong&gt;Agenda&lt;/strong&gt;, my custom scheduler strips away non-essential features and focuses on what truly matters for small applications: &lt;strong&gt;reliability and ease of use&lt;/strong&gt;. It supports scheduling jobs at specific intervals, retrying on failure, and executing scripts or commands as needed. By keeping the codebase concise, the scheduler can be easily maintained and quickly deployed.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="seamless-integration-into-docker"&gt;
&lt;h3&gt;Seamless Integration into Docker&lt;/h3&gt;
&lt;p&gt;The scheduler is designed to be packaged as a &lt;strong&gt;multi-layer Docker container&lt;/strong&gt;. This approach allows me to include all the necessary &lt;strong&gt;CLI tools and backend executables&lt;/strong&gt; in one place, ensuring that the container remains isolated but tightly integrated with the rest of the application.&lt;/p&gt;
&lt;p&gt;This makes it an ideal &lt;strong&gt;sidecar container&lt;/strong&gt; to handle tasks for a larger web application. Its small footprint ensures that it won’t introduce significant overhead, making it an excellent choice for environments where resources are limited, such as microservices architectures or smaller backend deployments.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="real-time-observability-telegram-bot-and-email-alerts"&gt;
&lt;h3&gt;Real-Time Observability: Telegram Bot and Email Alerts&lt;/h3&gt;
&lt;p&gt;One of the unique aspects of this project was adding easy &lt;strong&gt;observability&lt;/strong&gt; and &lt;strong&gt;control&lt;/strong&gt; via a &lt;strong&gt;Telegram bot&lt;/strong&gt; and &lt;strong&gt;email notifications&lt;/strong&gt;. While the scheduler itself is minimalistic, I wanted to ensure I had a convenient way to monitor job status and handle any failures without diving into logs or dashboards.&lt;/p&gt;
&lt;p&gt;The Telegram bot integration allows me to start or stop jobs, check their status, and receive instant notifications when something goes wrong. This real-time control, paired with email alerts for periodic updates or error logs, ensures I stay informed even when the jobs are running in the background.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="perfect-for-small-scale-applications"&gt;
&lt;h3&gt;Perfect for Small-Scale Applications&lt;/h3&gt;
&lt;p&gt;This background job scheduler might not have the rich feature set of other established systems, but that’s exactly why it works so well in certain scenarios. For &lt;strong&gt;smaller applications&lt;/strong&gt; or web services that don’t require a heavy-duty job queue, this solution offers a lightweight, easy-to-manage alternative. It handles the basics efficiently, making it perfect for production environments where &lt;strong&gt;simplicity&lt;/strong&gt; and &lt;strong&gt;performance&lt;/strong&gt; are crucial.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="final-thoughts"&gt;
&lt;h3&gt;Final Thoughts&lt;/h3&gt;
&lt;p&gt;Creating this custom background job scheduler has been a rewarding experience. It’s not meant to replace more feature-rich systems, but rather fill the gap for projects where adding complex tooling would be overkill. With a &lt;strong&gt;small and concise codebase&lt;/strong&gt;, seamless &lt;strong&gt;Docker integration&lt;/strong&gt;, and &lt;strong&gt;real-time observability&lt;/strong&gt; via Telegram and email, this scheduler has become an invaluable part of my workflow.&lt;/p&gt;
&lt;p&gt;If you're working on a small backend or need a side container to handle background jobs without the complexity of larger frameworks, this custom solution might be just what you're looking for.&lt;/p&gt;
&lt;p&gt;If you're tackling a similar challenge in your project, I highly recommend to have a try with the Background Job scheduler: &lt;a class="reference external" href="https://github.com/alexpacio/background-job-scheduler"&gt;https://github.com/alexpacio/background-job-scheduler&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;</description><category>Background Jobs</category><category>Docker</category><category>Node.js</category><category>Telegram</category><category>TypeScript</category><guid>https://alexpacio.github.io/posts/lightweight-nodejs-background-job-scheduler/</guid><pubDate>Thu, 10 Oct 2024 12:00:00 GMT</pubDate></item><item><title>Full-fledged API + e2e tests + benchmark + IaC + Helm charts + more as an (interesting) exercise!</title><link>https://alexpacio.github.io/posts/python-k8s-api/</link><dc:creator>Alessandro Bolletta</dc:creator><description>&lt;p&gt;Last week, I was contacted for a coding challenge. The project seemed interesting, so I decided to take it on. At the very least, I would learn something new, which I was eager to explore: Pulumi, k6, FastAPI and some fancy modern things that make you look like a cool dev!&lt;/p&gt;
&lt;p&gt;The project involved creating a simple REST API in Python, which needed to be packaged with Helm, ready for deployment in a Kubernetes (K8s) cluster, and including all the essential tools required.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;A Python REST API backend program. The choice of framework was up to me&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unit and e2e tests&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swagger/OpenAPI documentation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A CDK-like deployment script to automate the API’s dependencies: Terraform or Pulumi (for an AWS CDK-like experience). Since I was curious, I chose Pulumi&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Backend API should store its state via AWS PaaS services. Either a real AWS account or an automated way to use Localstack, a tool that simulates AWS’s APIs in your local environment, would have worked&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A Helm package to deploy the Kubernetes cluster&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Health checking mechanisms&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scripts to tie everything together, making the cluster reproducible by following a series of steps outlined in a README file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Horizontal autoscaling&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Built-in application benchmarking&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The ultimate goal is now clear: creating a self-contained package that could easily reproduce a complete, production-ready REST API backend in a cloud native and scalable setup.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here’s the result of my work: &lt;a class="reference external" href="https://github.com/alexpacio/python-webapp-boilerplate"&gt;https://github.com/alexpacio/python-webapp-boilerplate&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Although there are a few rough edges and minor aspects that I handled in a superficial way, this serves as an example of how a modern, asynchronous FastAPI backend can be delivered within a single Git repository.
I believe it's a solid boilerplate to start with, and it allowed me to explore new tools like Pulumi, FastAPI, and other recent technologies.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thoughts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Even though I feel like the entire AWS ecosystem is increasingly filling gaps (perhaps revenue gaps?) with bloat everywhere, I’ve been impressed with how concise, easy to use, develop, and reproduce a project like this can be. From this foundation, you can build a very sophisticated system while keeping everything in one place.
Additionally, you can test your AWS services locally and connect them later by simply using the Helm values file for the infrastructure or the .env file in the root folder for the application properties.&lt;/p&gt;
&lt;p&gt;As mentioned, there’s definitely room for several small adjustments to make it work seamlessly, but I think this is a very solid and complete starting point! I may have missed something important, as I dedicated only a small portion of my time to this challenge.&lt;/p&gt;
&lt;p&gt;Imagine having a temporary Kubernetes (K8s) namespace just to run your end-to-end (e2e) tests, reproducing the entire AWS PaaS stack and your application in a replicated and horizontally scalable way: you run the tests, collect the report, and then dispose of the environment.&lt;/p&gt;
&lt;p&gt;The same approach can be used for your benchmarking needs.&lt;/p&gt;
&lt;p&gt;With every change you make to your code, you can potentially test each step in your local cluster, which is automatically initialized in every aspect.&lt;/p&gt;
&lt;p&gt;Just focus on your infrastructure and application code, set your environment variable files, and your portable cluster is up and running!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Outcome&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I think I’ll continue to work on this. Cloud-native applications that avoid being locked into a specific cloud provider while still being distributed, scalable, and easy to use are possible.
I look forward to building an opinionated version of this soon. Stay tuned!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Contribute!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Feel free to use it as you wish, and let me know if you have any comments.&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;</description><category>cloud-native</category><category>fastapi</category><category>k6</category><category>k8s</category><category>kubernetes</category><category>pulumi</category><guid>https://alexpacio.github.io/posts/python-k8s-api/</guid><pubDate>Sun, 22 Sep 2024 12:19:03 GMT</pubDate></item><item><title>Hello world!</title><link>https://alexpacio.github.io/posts/hello-world/</link><dc:creator>Alessandro Bolletta</dc:creator><description>&lt;p&gt;This is my first post! I'm excited to start sharing tips on backend development, cloud computing, and more.&lt;/p&gt;</description><guid>https://alexpacio.github.io/posts/hello-world/</guid><pubDate>Sat, 21 Sep 2024 14:41:03 GMT</pubDate></item></channel></rss>