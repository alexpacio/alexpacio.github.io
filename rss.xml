<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Alessandro Bolletta</title><link>https://alexpacio.github.io/</link><description>Tells the story of a guy's mishaps and shenanigans with computers.</description><atom:link href="https://alexpacio.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2025 &lt;a href="mailto:alexpacio91 at gmail dot com"&gt;Alessandro Bolletta&lt;/a&gt; </copyright><lastBuildDate>Sat, 31 May 2025 15:29:53 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Embracing the IPv6 Revolution: A Homelab Story</title><link>https://alexpacio.github.io/posts/embracing-the-ipv6-revolution-a-homelab-story/</link><dc:creator>Alessandro Bolletta</dc:creator><description>&lt;p&gt;The other day, I was contacted by a friend of mine asking for help setting up a home NAS (aka Network Attached Storage) based on OpenMediaVault. While he's an enthusiast, he wasn't able to properly configure all the technical aspects of the setup.&lt;/p&gt;
&lt;p&gt;The NAS world is increasingly resembling a homelab rather than just file storage. Using Docker, you can get enterprise-grade software and setups running with quite simple steps.&lt;/p&gt;
&lt;p&gt;After setting up the Docker containers, we faced the usual issue that most homelabs encounter these days: his internet connection was behind a CGNAT for IPv4 networking. However, I was pleasantly surprised to find an IPv6 public subnet already configured!&lt;/p&gt;
&lt;p&gt;Since his intent was to use the NAS via LAN or his mobile phone (and those of his family/relatives), we investigated and figured out that various Italian 4G/5G carriers were providing IPv6 connectivity. So, we decided to give it a try.&lt;/p&gt;
&lt;p&gt;I am surprised that IPv6 is still such an unexplored world, even though it's already here and many of us haven't even noticed. Carriers are starting to support it seriously, and the IPv4 scarcity situation is getting worse as time goes by.&lt;/p&gt;
&lt;p&gt;One of the most interesting things about using IPv6 is that it truly enables &lt;em&gt;peer-to-peer&lt;/em&gt; communication, as you no longer need inbound or outbound IP address translations (NAT) to communicate with others.&lt;/p&gt;
&lt;p&gt;IPv6 is poised to be one of the biggest &lt;em&gt;silent&lt;/em&gt; revolutions in the Internet/networking field. While it might not offer apparently groundbreaking innovations to the general public, it will enable us to be more interconnected.&lt;/p&gt;
&lt;p&gt;The Internet is meant to be a democratic platform. However, if users are masked or filtered by CGNAT, they can never truly use the Internet actively. They become passive actors on the scene, mere consumers, or producers reliant on someone else's services or infrastructure. IPv6 enables a more democratic approach, where we can connect all of our devices, even personal ones, directly to the web and interact with others' devices without middlemen.&lt;/p&gt;
&lt;p&gt;If you have a homelab, give IPv6 a try! Be prepared for the revolution and the major move to IPv6, which might happen sooner rather than later—even if you'd given up waiting for it!&lt;/p&gt;</description><category>cgnat</category><category>Docker</category><category>homelab</category><category>internet</category><category>ipv6</category><category>nas</category><category>networking</category><category>openmediavault</category><guid>https://alexpacio.github.io/posts/embracing-the-ipv6-revolution-a-homelab-story/</guid><pubDate>Fri, 30 May 2025 10:00:00 GMT</pubDate></item><item><title>The Hidden Costs of Static Linking and Containerization: A Critical Analysis</title><link>https://alexpacio.github.io/posts/hidden-costs-static-linking-containerization/</link><dc:creator>Alessandro Bolletta</dc:creator><description>&lt;section id="statically-linked-programs-are-the-evil"&gt;
&lt;h2&gt;Statically-linked Programs are the evil&lt;/h2&gt;
&lt;p&gt;The trend toward static linking represents a fundamental regression in software engineering principles. By bundling every dependency directly into the executable, we're not just bloating our binaries - we're actively dismantling decades of progress in software modularization. Each statically linked program becomes an island, disconnected from the ecosystem of shared improvements and security updates.&lt;/p&gt;
&lt;p&gt;Consider what happens when a critical vulnerability is discovered in a commonly used library. In a properly designed system using shared libraries, a single system update would protect all applications simultaneously. Instead, with static linking, we must embark on a complex and error-prone process of identifying every affected program, rebuilding each one individually, and ensuring they all get redeployed. This process isn't just inefficient - it's dangerously irresponsible and prone to oversights that could leave vulnerable versions running indefinitely.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="containerized-programs-are-the-evil-with-an-uppercased-e-at-the-beginning"&gt;
&lt;h2&gt;Containerized Programs are the Evil (with an uppercased E at the beginning)&lt;/h2&gt;
&lt;p&gt;If static linking is problematic, containerization compounds these issues exponentially. Not only do we face the fundamental problems of static linking, but we now multiply them across isolated environments. Each container becomes its own separate universe with redundant copies of shared resources, creating a nightmare of inefficiency and complexity.&lt;/p&gt;
&lt;p&gt;The storage implications alone are staggering. Where a traditional system might maintain one copy of a commonly used library, a containerized environment duplicates this library across potentially hundreds of containers. This multiplication effect extends to memory usage as well - shared libraries can no longer be shared across container boundaries, leading to massive memory bloat as each container loads its own copy of identical code.&lt;/p&gt;
&lt;p&gt;Deployment times suffer significantly as entire container images must be transferred across networks. What should be a simple application update becomes an exercise in moving entire system images. The orchestration requirements grow exponentially, requiring complex management systems just to keep track of all these isolated environments.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="both-produce-unsafe-applications-and-expose-you-at-risks"&gt;
&lt;h2&gt;Both produce unsafe applications and expose you at risks&lt;/h2&gt;
&lt;p&gt;Static linking and containerization create dangerous security time bombs by embedding frozen versions of libraries into applications, making it impossible to quickly patch discovered vulnerabilities. When a critical security flaw is found in a shared library, systems using dynamic linking can deploy a single patch to protect all applications simultaneously, while statically linked applications require individual rebuilds and redeployments - a process so complex that vulnerable versions often remain in production indefinitely. Containerization worsens this problem by bundling entire operating system environments, expanding the vulnerability surface exponentially and making security audits nightmarishly complex. Each container potentially includes thousands of packages that need individual tracking and updating, creating an unmanageable maze of dependencies. The false sense of security provided by containerization leads to dangerous complacency, as developers mistakenly believe container isolation protects them from security vulnerabilities while sharing the same kernel. Sensitive information like API keys often gets baked into static binaries or container images, making secret rotation difficult and increasing exposure risks. The solution lies in transparent, centrally managed dependencies that enable rapid security responses, not in the isolation and rigidity that static linking and containerization impose.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="why-we-do-love-to-statically-link-and-why-there-are-hidden-costs-behind-it"&gt;
&lt;h2&gt;Why We Do Love to Statically Link and Why There Are Hidden Costs Behind It&lt;/h2&gt;
&lt;p&gt;The seductive appeal of static linking lies in its promise of deployment simplicity and dependency predictability. Developers often embrace it because it seems to solve the "it works on my machine" problem - when everything is bundled together, environmental differences supposedly disappear. However, this apparent simplicity masks a deep complexity that manifests in numerous hidden costs.&lt;/p&gt;
&lt;p&gt;The maintenance burden becomes particularly apparent over time. Security updates, which should be straightforward, turn into massive undertakings. Each statically linked program must be individually identified, rebuilt, and redeployed. Version tracking becomes exponentially more complex as each program effectively contains its own complete dependency tree. The testing burden multiplies because each static build represents a unique combination of library versions that must be verified independently.&lt;/p&gt;
&lt;p&gt;Resource inefficiency manifests in multiple ways. Beyond the obvious waste of disk space from duplicate code, there's a significant memory overhead when multiple programs load their own copies of identical libraries. Build times increase dramatically as each program must compile all its dependencies from scratch, and deployment sizes balloon with redundant code.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="why-the-c-language-is-really-good-in-making-software-reusable"&gt;
&lt;h2&gt;Why the C Language is Really Good in Making Software Reusable&lt;/h2&gt;
&lt;p&gt;The C language's approach to software reuse through shared libraries represents one of its most sophisticated yet underappreciated features. At its core, C's ability to create stable Application Binary Interfaces (ABIs) enables a level of code reuse that modern approaches often fail to match. This isn't just about saving disk space - it's about creating a genuine ecosystem of reusable components.&lt;/p&gt;
&lt;p&gt;The straightforward linking model in C allows programs to dynamically load code at runtime, enabling true resource sharing between applications. When multiple programs use the same library, they share the actual memory pages containing that code, significantly reducing the system's memory footprint. This sharing extends beyond mere storage efficiency - it enables system-wide optimizations that benefit all applications simultaneously.&lt;/p&gt;
&lt;p&gt;Furthermore, C's model enables clear separation between applications and their dependencies while maintaining high performance. Platform-specific optimizations can be implemented at the library level, automatically benefiting all applications that use that library. This model has successfully powered Unix-like systems for decades, demonstrating its effectiveness in real-world deployments.&lt;/p&gt;
&lt;p&gt;It's ridiculous to find how a language from 1970 offers better code reusability than the ones from 2020s. 55 years ago some wise people envisioned very smart concepts that are still foundational.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="why-an-operating-system-that-doesn-t-reuse-libraries-is-not-an-os-by-definition"&gt;
&lt;h2&gt;Why an Operating System That Doesn't Reuse Libraries is Not an OS by Definition&lt;/h2&gt;
&lt;p&gt;The fundamental purpose of an operating system extends far beyond merely managing hardware resources - it serves as a platform for sharing and coordinating resources among applications. When we bypass this through static linking and containerization, we're essentially creating multiple parallel "operating systems" within one host, fundamentally undermining the very concept of what an operating system should be.&lt;/p&gt;
&lt;p&gt;Consider the primary responsibilities of an operating system: it must efficiently allocate system resources, manage shared memory, and coordinate access to hardware. These functions aren't meant to be isolated - they're designed to create a cooperative environment where applications can share resources efficiently. When each application brings its own copy of system libraries, we're not just duplicating code - we're fragmenting the very foundation of system resource management.&lt;/p&gt;
&lt;p&gt;The provision of shared services represents another crucial aspect of operating system functionality. By maintaining common libraries available to all applications, the operating system creates a standardized platform for development and execution. This standardization isn't just about convenience - it's about creating a reliable, secure, and efficient computing environment. When applications bypass these shared services through static linking, they're effectively declaring independence from the operating system's core functionality.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="using-shared-libraries-would-make-programs-more-modern-testable-efficient"&gt;
&lt;h2&gt;Using Shared Libraries Would Make Programs More Modern, Testable, Efficient&lt;/h2&gt;
&lt;p&gt;The adoption of shared libraries aligns perfectly with modern software development practices, offering advantages that go far beyond simple resource sharing. Consider the impact on modularity: when programs rely on shared libraries, they naturally develop cleaner interfaces and better separation of concerns. This modularity isn't just theoretical - it manifests in practical benefits throughout the development lifecycle.&lt;/p&gt;
&lt;p&gt;Testing becomes substantially more manageable with shared libraries. Instead of testing entire static binaries as monolithic units, developers can focus on testing the interactions between their code and well-defined library interfaces. This approach not only reduces testing complexity but also helps identify issues more precisely. When a bug is found in a shared library, fixing it benefits all applications simultaneously.&lt;/p&gt;
&lt;p&gt;The efficiency gains from shared libraries extend throughout the entire software lifecycle. Build times decrease significantly when programs don't need to compile their dependencies from scratch. Deployments become faster and more reliable when they can rely on existing system libraries. Memory usage improves as multiple programs share the same library code in memory, and cache utilization becomes more efficient when common code paths are shared across applications.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-only-modern-revolution-i-see-coming-is-stateless-oses"&gt;
&lt;h2&gt;The Only Modern Revolution I See Coming is Stateless OSes&lt;/h2&gt;
&lt;p&gt;The future of operating systems lies not in static linking or containerization, but in embracing a truly stateless architecture that revolutionizes how we think about system resources and application dependencies. This vision combines the best aspects of immutable infrastructure with the efficiency of shared resources, creating a new paradigm for system design.&lt;/p&gt;
&lt;p&gt;At the core of this revolution is the concept of an immutable system layer containing verified, signed dependencies. These system libraries would be read-only and atomic in their updates, eliminating many traditional points of failure in system maintenance. However, unlike current trends toward static linking, these libraries would be shared efficiently across all applications.&lt;/p&gt;
&lt;p&gt;The user space in such a system would be truly dynamic, with intelligent library loading and version management. Instead of each application maintaining its own copies of libraries, the system would efficiently manage shared resources, loading different versions only when absolutely necessary and optimizing memory usage across all applications. This approach would maintain the isolation benefits that developers seek from static linking while eliminating the resource waste and security risks.&lt;/p&gt;
&lt;p&gt;Security in this new paradigm would be fundamentally different from current approaches. Instead of relying on the isolation of static linking or containers, security would be built on a foundation of verified execution paths and centralized vulnerability management. System-wide security patches could be applied instantly and atomically, eliminating the complex coordination currently required to update statically linked applications.&lt;/p&gt;
&lt;p&gt;The revolution isn't about finding new ways to isolate our code - it's about creating intelligent systems that can dynamically manage dependencies while maintaining security and efficiency. By moving away from the current trends of static linking and containerization, we can build systems that are truly efficient, secure, and maintainable. The future lies not in isolation, but in intelligent sharing of resources and code.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="containerized-or-statically-linked-applications-should-be-embraced-only-for-playground-or-very-small-deployments"&gt;
&lt;h2&gt;Containerized or statically-linked applications should be embraced only for playground or very small deployments&lt;/h2&gt;
&lt;p&gt;While I find useful using containers or statically-linked applications to build toy projects, and I am going to use them for these purposes, they cannot certainly be a reference model for the future.&lt;/p&gt;
&lt;p&gt;snap, flatpak, AppImage, Docker should not be taken so seriously as they pretend to be.&lt;/p&gt;
&lt;/section&gt;</description><category>containers</category><category>development</category><category>infrastructure</category><category>security</category><category>static-linking</category><guid>https://alexpacio.github.io/posts/hidden-costs-static-linking-containerization/</guid><pubDate>Sun, 02 Feb 2025 07:00:00 GMT</pubDate></item><item><title>Exchanging messages between processes (or even threads within the same program) using ZeroMQ</title><link>https://alexpacio.github.io/posts/message-exchanges-using-zeromq/</link><dc:creator>Alessandro Bolletta</dc:creator><description>&lt;section id="inter-process-communication-with-zeromq-and-protocol-buffers"&gt;
&lt;h2&gt;Inter-Process Communication with ZeroMQ (and Protocol Buffers)&lt;/h2&gt;
&lt;section id="introduction"&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Some may certainly say that, when you are writing so called "daemons" under Linux/Unix OSes or "services" under Windows, you might want to use OS primitives/reuse existing libraries to make your programs communicate each other. And I strongly agree with the point: it is always a good idea to use a well-tested and solid library to implement such fundamental features such as message queues.&lt;/p&gt;
&lt;p&gt;For example, under Linux you can use D-Bus, which allows IPC at scale within the OS scope. Or, in the microservices space, you can leverage on message brokers like RabbitMQ or Kafka to stream your messages through sophisticated routing logic. However, at times you are just looking for something trivial and simple to send and queue messages where at the same time you look for brokerless setup but still you are willing to leverage on some of the features that message queuing systems offer for free with ease. That's where ZeroMQ comes in.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-is-zeromq"&gt;
&lt;h3&gt;What is ZeroMQ?&lt;/h3&gt;
&lt;p&gt;ZeroMQ (ØMQ) is a high-performance asynchronous messaging library aimed at use in distributed or concurrent applications. It provides a message queue, but unlike message-oriented middleware, a ZeroMQ system can run without a dedicated message broker. The API layer provides a message-oriented abstraction of asynchronous network communication, multiple messaging patterns, message filtering, and more.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="supported-transport-protocols"&gt;
&lt;h3&gt;Supported Transport Protocols&lt;/h3&gt;
&lt;p&gt;ZeroMQ supports various transport protocols through different URI schemes where the main ones are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;tcp://&lt;/span&gt;&lt;/code&gt; - TCP transport&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ipc://&lt;/span&gt;&lt;/code&gt; - Inter-process communication (Unix domain sockets)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;inproc://&lt;/span&gt;&lt;/code&gt; - In-process communication between threads&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="thread-safety-and-context-management"&gt;
&lt;h3&gt;Thread Safety and Context Management&lt;/h3&gt;
&lt;p&gt;In both C and Go, ZeroMQ contexts are thread-safe, but sockets are not. Here's how to handle them properly:&lt;/p&gt;
&lt;p&gt;In Go:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code go"&gt;&lt;a id="rest_code_79c0d49333274421a51d81773a055086-1" name="rest_code_79c0d49333274421a51d81773a055086-1" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_79c0d49333274421a51d81773a055086-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// Thread-safe context creation&lt;/span&gt;
&lt;a id="rest_code_79c0d49333274421a51d81773a055086-2" name="rest_code_79c0d49333274421a51d81773a055086-2" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_79c0d49333274421a51d81773a055086-2"&gt;&lt;/a&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;zmq4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewContext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_79c0d49333274421a51d81773a055086-3" name="rest_code_79c0d49333274421a51d81773a055086-3" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_79c0d49333274421a51d81773a055086-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_79c0d49333274421a51d81773a055086-4" name="rest_code_79c0d49333274421a51d81773a055086-4" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_79c0d49333274421a51d81773a055086-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// Socket creation should be done in the thread that uses it&lt;/span&gt;
&lt;a id="rest_code_79c0d49333274421a51d81773a055086-5" name="rest_code_79c0d49333274421a51d81773a055086-5" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_79c0d49333274421a51d81773a055086-5"&gt;&lt;/a&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewSocket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;zmq4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PUSH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_79c0d49333274421a51d81773a055086-6" name="rest_code_79c0d49333274421a51d81773a055086-6" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_79c0d49333274421a51d81773a055086-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;defer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In C:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code c"&gt;&lt;a id="rest_code_2be126cc502c45d39e29c2e5dcca912e-1" name="rest_code_2be126cc502c45d39e29c2e5dcca912e-1" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_2be126cc502c45d39e29c2e5dcca912e-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// Thread-safe context creation&lt;/span&gt;
&lt;a id="rest_code_2be126cc502c45d39e29c2e5dcca912e-2" name="rest_code_2be126cc502c45d39e29c2e5dcca912e-2" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_2be126cc502c45d39e29c2e5dcca912e-2"&gt;&lt;/a&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zmq_ctx_new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_2be126cc502c45d39e29c2e5dcca912e-3" name="rest_code_2be126cc502c45d39e29c2e5dcca912e-3" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_2be126cc502c45d39e29c2e5dcca912e-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_2be126cc502c45d39e29c2e5dcca912e-4" name="rest_code_2be126cc502c45d39e29c2e5dcca912e-4" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_2be126cc502c45d39e29c2e5dcca912e-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// Socket creation - not thread-safe&lt;/span&gt;
&lt;a id="rest_code_2be126cc502c45d39e29c2e5dcca912e-5" name="rest_code_2be126cc502c45d39e29c2e5dcca912e-5" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_2be126cc502c45d39e29c2e5dcca912e-5"&gt;&lt;/a&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zmq_socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ZMQ_PUSH&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id="intra-thread-communication-example"&gt;
&lt;h3&gt;Intra-Thread Communication Example&lt;/h3&gt;
&lt;p&gt;Here's an example of thread communication using ZeroMQ in C:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code c"&gt;&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-1" name="rest_code_60164a3798e04d3aafab003f55027db6-1" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;zmq.h&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-2" name="rest_code_60164a3798e04d3aafab003f55027db6-2" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-2"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;pthread.h&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-3" name="rest_code_60164a3798e04d3aafab003f55027db6-3" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-3"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-4" name="rest_code_60164a3798e04d3aafab003f55027db6-4" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-5" name="rest_code_60164a3798e04d3aafab003f55027db6-5" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-5"&gt;&lt;/a&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;worker_routine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-6" name="rest_code_60164a3798e04d3aafab003f55027db6-6" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;receiver&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zmq_socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ZMQ_PULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-7" name="rest_code_60164a3798e04d3aafab003f55027db6-7" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;zmq_connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"inproc://workers"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-8" name="rest_code_60164a3798e04d3aafab003f55027db6-8" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-8"&gt;&lt;/a&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-9" name="rest_code_60164a3798e04d3aafab003f55027db6-9" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-10" name="rest_code_60164a3798e04d3aafab003f55027db6-10" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-11" name="rest_code_60164a3798e04d3aafab003f55027db6-11" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;zmq_recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-12" name="rest_code_60164a3798e04d3aafab003f55027db6-12" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Received: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-13" name="rest_code_60164a3798e04d3aafab003f55027db6-13" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-13"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-14" name="rest_code_60164a3798e04d3aafab003f55027db6-14" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-14"&gt;&lt;/a&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-15" name="rest_code_60164a3798e04d3aafab003f55027db6-15" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-15"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;zmq_close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-16" name="rest_code_60164a3798e04d3aafab003f55027db6-16" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-16"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-17" name="rest_code_60164a3798e04d3aafab003f55027db6-17" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-17"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-18" name="rest_code_60164a3798e04d3aafab003f55027db6-18" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-18"&gt;&lt;/a&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-19" name="rest_code_60164a3798e04d3aafab003f55027db6-19" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-19"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-20" name="rest_code_60164a3798e04d3aafab003f55027db6-20" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-20"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zmq_ctx_new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-21" name="rest_code_60164a3798e04d3aafab003f55027db6-21" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-21"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zmq_socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ZMQ_PUSH&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-22" name="rest_code_60164a3798e04d3aafab003f55027db6-22" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-22"&gt;&lt;/a&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-23" name="rest_code_60164a3798e04d3aafab003f55027db6-23" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-23"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;zmq_bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"inproc://workers"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-24" name="rest_code_60164a3798e04d3aafab003f55027db6-24" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-24"&gt;&lt;/a&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-25" name="rest_code_60164a3798e04d3aafab003f55027db6-25" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-25"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;pthread_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-26" name="rest_code_60164a3798e04d3aafab003f55027db6-26" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-26"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;pthread_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;worker_routine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-27" name="rest_code_60164a3798e04d3aafab003f55027db6-27" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-27"&gt;&lt;/a&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-28" name="rest_code_60164a3798e04d3aafab003f55027db6-28" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-28"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Send messages&lt;/span&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-29" name="rest_code_60164a3798e04d3aafab003f55027db6-29" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-29"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Hello Worker!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-30" name="rest_code_60164a3798e04d3aafab003f55027db6-30" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-30"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;zmq_send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-31" name="rest_code_60164a3798e04d3aafab003f55027db6-31" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-31"&gt;&lt;/a&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-32" name="rest_code_60164a3798e04d3aafab003f55027db6-32" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-32"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// Allow time for message processing&lt;/span&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-33" name="rest_code_60164a3798e04d3aafab003f55027db6-33" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-33"&gt;&lt;/a&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-34" name="rest_code_60164a3798e04d3aafab003f55027db6-34" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-34"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;zmq_close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-35" name="rest_code_60164a3798e04d3aafab003f55027db6-35" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-35"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;zmq_ctx_destroy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-36" name="rest_code_60164a3798e04d3aafab003f55027db6-36" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-36"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_60164a3798e04d3aafab003f55027db6-37" name="rest_code_60164a3798e04d3aafab003f55027db6-37" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_60164a3798e04d3aafab003f55027db6-37"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id="high-water-mark-and-flow-control"&gt;
&lt;h3&gt;High Water Mark and Flow Control&lt;/h3&gt;
&lt;p&gt;ZeroMQ provides flow control through the High Water Mark (HWM) feature. When the HWM is reached, ZeroMQ will either block or drop messages depending on the socket type and configuration:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code c"&gt;&lt;a id="rest_code_90b56453512644b38fcfd89ebeec16e2-1" name="rest_code_90b56453512644b38fcfd89ebeec16e2-1" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_90b56453512644b38fcfd89ebeec16e2-1"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hwm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_90b56453512644b38fcfd89ebeec16e2-2" name="rest_code_90b56453512644b38fcfd89ebeec16e2-2" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_90b56453512644b38fcfd89ebeec16e2-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;zmq_setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ZMQ_SNDHWM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;hwm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hwm&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;a id="rest_code_90b56453512644b38fcfd89ebeec16e2-3" name="rest_code_90b56453512644b38fcfd89ebeec16e2-3" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_90b56453512644b38fcfd89ebeec16e2-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_90b56453512644b38fcfd89ebeec16e2-4" name="rest_code_90b56453512644b38fcfd89ebeec16e2-4" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_90b56453512644b38fcfd89ebeec16e2-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// To prevent dropping messages when HWM is reached&lt;/span&gt;
&lt;a id="rest_code_90b56453512644b38fcfd89ebeec16e2-5" name="rest_code_90b56453512644b38fcfd89ebeec16e2-5" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_90b56453512644b38fcfd89ebeec16e2-5"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nodrop&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_90b56453512644b38fcfd89ebeec16e2-6" name="rest_code_90b56453512644b38fcfd89ebeec16e2-6" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_90b56453512644b38fcfd89ebeec16e2-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;zmq_setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ZMQ_XPUB_NODROP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;nodrop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodrop&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id="protocol-buffers-integration"&gt;
&lt;h3&gt;Protocol Buffers Integration&lt;/h3&gt;
&lt;p&gt;Since ZeroMQ only transfers raw bytes, it pairs well with Protocol Buffers for structured data serialization. Here's an example using both C++ and Go:&lt;/p&gt;
&lt;p&gt;First, define your protocol buffer:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code protobuf"&gt;&lt;a id="rest_code_30ac64ed6d184b20adab3c538c242c2e-1" name="rest_code_30ac64ed6d184b20adab3c538c242c2e-1" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_30ac64ed6d184b20adab3c538c242c2e-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// message.proto&lt;/span&gt;
&lt;a id="rest_code_30ac64ed6d184b20adab3c538c242c2e-2" name="rest_code_30ac64ed6d184b20adab3c538c242c2e-2" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_30ac64ed6d184b20adab3c538c242c2e-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;syntax&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"proto3"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_30ac64ed6d184b20adab3c538c242c2e-3" name="rest_code_30ac64ed6d184b20adab3c538c242c2e-3" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_30ac64ed6d184b20adab3c538c242c2e-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_30ac64ed6d184b20adab3c538c242c2e-4" name="rest_code_30ac64ed6d184b20adab3c538c242c2e-4" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_30ac64ed6d184b20adab3c538c242c2e-4"&gt;&lt;/a&gt;&lt;span class="kd"&gt;message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;DataMessage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_30ac64ed6d184b20adab3c538c242c2e-5" name="rest_code_30ac64ed6d184b20adab3c538c242c2e-5" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_30ac64ed6d184b20adab3c538c242c2e-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_30ac64ed6d184b20adab3c538c242c2e-6" name="rest_code_30ac64ed6d184b20adab3c538c242c2e-6" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_30ac64ed6d184b20adab3c538c242c2e-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;timestamp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_30ac64ed6d184b20adab3c538c242c2e-7" name="rest_code_30ac64ed6d184b20adab3c538c242c2e-7" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_30ac64ed6d184b20adab3c538c242c2e-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using it in Go:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code go"&gt;&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-1" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-1" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-2" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-2" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-3" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-3" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-4" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-4" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;"log"&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-5" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-5" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-6" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-6" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;"github.com/pebbe/zmq4"&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-7" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-7" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;"google.golang.org/protobuf/proto"&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-8" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-8" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;examplepb&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"path/to/generated/proto"&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-9" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-9" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-10" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-10" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-10"&gt;&lt;/a&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-11" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-11" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-11"&gt;&lt;/a&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-12" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-12" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Create a ZeroMQ context&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-13" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-13" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-13"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;zmq4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewContext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-14" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-14" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-14"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-15" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-15" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-15"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatalf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Failed to create ZeroMQ context: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-16" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-16" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-16"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-17" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-17" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-17"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;defer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Term&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Ensure the context is terminated when the program exits&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-18" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-18" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-18"&gt;&lt;/a&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-19" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-19" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-19"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Create a ZeroMQ Subscriber socket&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-20" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-20" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-20"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewSocket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;zmq4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SUB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-21" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-21" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-21"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-22" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-22" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-22"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatalf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Failed to create subscriber socket: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-23" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-23" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-23"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-24" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-24" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-24"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;defer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-25" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-25" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-25"&gt;&lt;/a&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-26" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-26" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-26"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Connect to the publisher&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-27" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-27" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-27"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tcp://127.0.0.1:5555"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-28" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-28" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-28"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-29" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-29" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-29"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatalf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Failed to connect subscriber: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-30" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-30" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-30"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-31" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-31" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-31"&gt;&lt;/a&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-32" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-32" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-32"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Subscribe to all messages&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-33" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-33" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-33"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SetSubscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-34" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-34" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-34"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-35" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-35" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-35"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatalf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Failed to set subscription: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-36" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-36" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-36"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-37" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-37" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-37"&gt;&lt;/a&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-38" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-38" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-38"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Subscriber started, waiting for messages..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-39" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-39" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-39"&gt;&lt;/a&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-40" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-40" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-40"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-41" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-41" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-41"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Receive the serialized message&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-42" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-42" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-42"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RecvBytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-43" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-43" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-43"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-44" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-44" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-44"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Failed to receive message: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-45" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-45" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-45"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;continue&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-46" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-46" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-46"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-47" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-47" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-47"&gt;&lt;/a&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-48" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-48" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-48"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Deserialize the message&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-49" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-49" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-49"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;examplepb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ExampleMessage&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-50" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-50" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-50"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;proto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Unmarshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-51" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-51" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-51"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-52" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-52" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-52"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Failed to deserialize message: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-53" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-53" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-53"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;continue&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-54" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-54" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-54"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-55" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-55" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-55"&gt;&lt;/a&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-56" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-56" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-56"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Print the received message&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-57" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-57" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-57"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Received message: ID=%s, Content=%s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-58" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-58" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-58"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a id="rest_code_adb0beae035c4e4aafbc38e0d8421239-59" name="rest_code_adb0beae035c4e4aafbc38e0d8421239-59" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_adb0beae035c4e4aafbc38e0d8421239-59"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id="explanation"&gt;
&lt;h3&gt;Explanation&lt;/h3&gt;
&lt;p&gt;Context: The zmq.NewContext() function creates a new ZeroMQ context, which is required to create sockets.&lt;/p&gt;
&lt;p&gt;Socket: The context.NewSocket(zmq.SUB) function creates a new SUB socket for subscribing to messages.&lt;/p&gt;
&lt;p&gt;Connect: The subscriber.Connect("&lt;a class="reference external" href="tcp://localhost:5555"&gt;tcp://localhost:5555&lt;/a&gt;") function connects the subscriber to the publisher’s address.&lt;/p&gt;
&lt;p&gt;Subscribe: The socket.SetSubscribe("") function subscribes to all messages (an empty string means subscribe to everything). This acts as a way to subscribe to a string prefix (so called "topic" in other MQ systems)&lt;/p&gt;
&lt;p&gt;Recv: The socket.RecvBytes(0) function blocks until a message is received.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="asynchronous-message-emission"&gt;
&lt;h3&gt;Asynchronous Message Emission&lt;/h3&gt;
&lt;p&gt;ZeroMQ supports non-blocking sends using the &lt;code class="docutils literal"&gt;ZMQ_DONTWAIT&lt;/code&gt; flag:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code c"&gt;&lt;a id="rest_code_2acc8f24b8fb457bb6a3c5badfdaea5a-1" name="rest_code_2acc8f24b8fb457bb6a3c5badfdaea5a-1" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_2acc8f24b8fb457bb6a3c5badfdaea5a-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;zmq_send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ZMQ_DONTWAIT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_2acc8f24b8fb457bb6a3c5badfdaea5a-2" name="rest_code_2acc8f24b8fb457bb6a3c5badfdaea5a-2" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_2acc8f24b8fb457bb6a3c5badfdaea5a-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// Code continues immediately without waiting for the send operation outcome&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id="performance-considerations"&gt;
&lt;h3&gt;Performance Considerations&lt;/h3&gt;
&lt;p&gt;ZeroMQ is particularly well-suited for high-performance scenarios where:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;You need to decouple the message producer from the consumer&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The critical section needs to emit messages without blocking&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You want to avoid the overhead of a message broker&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You need reliable message delivery without managing it yourself&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The library handles many complex aspects automatically:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Message framing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Connection handling and reconnection&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Message queuing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fair message distribution&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Transport abstraction&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="zeromq-messaging-patterns"&gt;
&lt;h3&gt;ZeroMQ Messaging Patterns&lt;/h3&gt;
&lt;p&gt;ZeroMQ supports several fundamental messaging patterns, each designed for specific use cases:&lt;/p&gt;
&lt;section id="push-pull-pipeline"&gt;
&lt;h4&gt;Push/Pull (Pipeline)&lt;/h4&gt;
&lt;p&gt;The Push/Pull pattern creates a one-way data distribution pipeline. Messages sent by pushers are load-balanced among all connected pullers.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code c"&gt;&lt;a id="rest_code_8a428b997e344e74914a2a17f66cc071-1" name="rest_code_8a428b997e344e74914a2a17f66cc071-1" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_8a428b997e344e74914a2a17f66cc071-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// Pusher (sender)&lt;/span&gt;
&lt;a id="rest_code_8a428b997e344e74914a2a17f66cc071-2" name="rest_code_8a428b997e344e74914a2a17f66cc071-2" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_8a428b997e344e74914a2a17f66cc071-2"&gt;&lt;/a&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pusher&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zmq_socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ZMQ_PUSH&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_8a428b997e344e74914a2a17f66cc071-3" name="rest_code_8a428b997e344e74914a2a17f66cc071-3" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_8a428b997e344e74914a2a17f66cc071-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;zmq_bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pusher&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"tcp://*:5557"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_8a428b997e344e74914a2a17f66cc071-4" name="rest_code_8a428b997e344e74914a2a17f66cc071-4" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_8a428b997e344e74914a2a17f66cc071-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_8a428b997e344e74914a2a17f66cc071-5" name="rest_code_8a428b997e344e74914a2a17f66cc071-5" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_8a428b997e344e74914a2a17f66cc071-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// Puller (receiver)&lt;/span&gt;
&lt;a id="rest_code_8a428b997e344e74914a2a17f66cc071-6" name="rest_code_8a428b997e344e74914a2a17f66cc071-6" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_8a428b997e344e74914a2a17f66cc071-6"&gt;&lt;/a&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;puller&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zmq_socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ZMQ_PULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_8a428b997e344e74914a2a17f66cc071-7" name="rest_code_8a428b997e344e74914a2a17f66cc071-7" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_8a428b997e344e74914a2a17f66cc071-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;zmq_connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;puller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"tcp://localhost:5557"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Use cases:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Parallel task distribution&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Workload distribution in producer/consumer scenarios&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Data pipeline processing&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="pub-sub-publisher-subscriber"&gt;
&lt;h4&gt;Pub/Sub (Publisher/Subscriber)&lt;/h4&gt;
&lt;p&gt;Publishers send messages while subscribers receive them based on topics. Each subscriber can subscribe to multiple topics.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code go"&gt;&lt;a id="rest_code_3ae6a7df838a42cca42a1c4b513b3160-1" name="rest_code_3ae6a7df838a42cca42a1c4b513b3160-1" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_3ae6a7df838a42cca42a1c4b513b3160-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// Publisher&lt;/span&gt;
&lt;a id="rest_code_3ae6a7df838a42cca42a1c4b513b3160-2" name="rest_code_3ae6a7df838a42cca42a1c4b513b3160-2" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_3ae6a7df838a42cca42a1c4b513b3160-2"&gt;&lt;/a&gt;&lt;span class="nx"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;zmq4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewSocket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;zmq4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PUB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_3ae6a7df838a42cca42a1c4b513b3160-3" name="rest_code_3ae6a7df838a42cca42a1c4b513b3160-3" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_3ae6a7df838a42cca42a1c4b513b3160-3"&gt;&lt;/a&gt;&lt;span class="nx"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tcp://*:5563"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_3ae6a7df838a42cca42a1c4b513b3160-4" name="rest_code_3ae6a7df838a42cca42a1c4b513b3160-4" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_3ae6a7df838a42cca42a1c4b513b3160-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_3ae6a7df838a42cca42a1c4b513b3160-5" name="rest_code_3ae6a7df838a42cca42a1c4b513b3160-5" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_3ae6a7df838a42cca42a1c4b513b3160-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// Send message with topic&lt;/span&gt;
&lt;a id="rest_code_3ae6a7df838a42cca42a1c4b513b3160-6" name="rest_code_3ae6a7df838a42cca42a1c4b513b3160-6" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_3ae6a7df838a42cca42a1c4b513b3160-6"&gt;&lt;/a&gt;&lt;span class="nx"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"weather.london temperature:22"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_3ae6a7df838a42cca42a1c4b513b3160-7" name="rest_code_3ae6a7df838a42cca42a1c4b513b3160-7" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_3ae6a7df838a42cca42a1c4b513b3160-7"&gt;&lt;/a&gt;
&lt;a id="rest_code_3ae6a7df838a42cca42a1c4b513b3160-8" name="rest_code_3ae6a7df838a42cca42a1c4b513b3160-8" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_3ae6a7df838a42cca42a1c4b513b3160-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// Subscriber&lt;/span&gt;
&lt;a id="rest_code_3ae6a7df838a42cca42a1c4b513b3160-9" name="rest_code_3ae6a7df838a42cca42a1c4b513b3160-9" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_3ae6a7df838a42cca42a1c4b513b3160-9"&gt;&lt;/a&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;zmq4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewSocket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;zmq4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SUB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_3ae6a7df838a42cca42a1c4b513b3160-10" name="rest_code_3ae6a7df838a42cca42a1c4b513b3160-10" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_3ae6a7df838a42cca42a1c4b513b3160-10"&gt;&lt;/a&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tcp://localhost:5563"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_3ae6a7df838a42cca42a1c4b513b3160-11" name="rest_code_3ae6a7df838a42cca42a1c4b513b3160-11" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_3ae6a7df838a42cca42a1c4b513b3160-11"&gt;&lt;/a&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SetSubscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"weather.london"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Use cases:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Event broadcasting&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Real-time data feeds&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;System monitoring&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Live updates&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="request-reply-req-rep"&gt;
&lt;h4&gt;Request/Reply (REQ/REP)&lt;/h4&gt;
&lt;p&gt;A synchronous pattern where each request must be followed by a reply.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code c"&gt;&lt;a id="rest_code_345ef7d70e6048a4b52cbffd5eb399fd-1" name="rest_code_345ef7d70e6048a4b52cbffd5eb399fd-1" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_345ef7d70e6048a4b52cbffd5eb399fd-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// Server (Reply)&lt;/span&gt;
&lt;a id="rest_code_345ef7d70e6048a4b52cbffd5eb399fd-2" name="rest_code_345ef7d70e6048a4b52cbffd5eb399fd-2" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_345ef7d70e6048a4b52cbffd5eb399fd-2"&gt;&lt;/a&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;responder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zmq_socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ZMQ_REP&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_345ef7d70e6048a4b52cbffd5eb399fd-3" name="rest_code_345ef7d70e6048a4b52cbffd5eb399fd-3" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_345ef7d70e6048a4b52cbffd5eb399fd-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;zmq_bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"tcp://*:5555"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_345ef7d70e6048a4b52cbffd5eb399fd-4" name="rest_code_345ef7d70e6048a4b52cbffd5eb399fd-4" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_345ef7d70e6048a4b52cbffd5eb399fd-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_345ef7d70e6048a4b52cbffd5eb399fd-5" name="rest_code_345ef7d70e6048a4b52cbffd5eb399fd-5" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_345ef7d70e6048a4b52cbffd5eb399fd-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// Client (Request)&lt;/span&gt;
&lt;a id="rest_code_345ef7d70e6048a4b52cbffd5eb399fd-6" name="rest_code_345ef7d70e6048a4b52cbffd5eb399fd-6" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_345ef7d70e6048a4b52cbffd5eb399fd-6"&gt;&lt;/a&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;requester&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zmq_socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ZMQ_REQ&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_345ef7d70e6048a4b52cbffd5eb399fd-7" name="rest_code_345ef7d70e6048a4b52cbffd5eb399fd-7" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_345ef7d70e6048a4b52cbffd5eb399fd-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;zmq_connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requester&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"tcp://localhost:5555"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Use cases:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Remote procedure calls (RPC)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Service APIs&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Task delegation with acknowledgment&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="dealer-router"&gt;
&lt;h4&gt;Dealer/Router&lt;/h4&gt;
&lt;p&gt;An advanced asynchronous pattern that allows for complex routing scenarios.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code go"&gt;&lt;a id="rest_code_88d11188eef44b93be2663f6c4b4dffc-1" name="rest_code_88d11188eef44b93be2663f6c4b4dffc-1" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_88d11188eef44b93be2663f6c4b4dffc-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// Router&lt;/span&gt;
&lt;a id="rest_code_88d11188eef44b93be2663f6c4b4dffc-2" name="rest_code_88d11188eef44b93be2663f6c4b4dffc-2" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_88d11188eef44b93be2663f6c4b4dffc-2"&gt;&lt;/a&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;zmq4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewSocket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;zmq4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ROUTER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_88d11188eef44b93be2663f6c4b4dffc-3" name="rest_code_88d11188eef44b93be2663f6c4b4dffc-3" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_88d11188eef44b93be2663f6c4b4dffc-3"&gt;&lt;/a&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tcp://*:5555"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_88d11188eef44b93be2663f6c4b4dffc-4" name="rest_code_88d11188eef44b93be2663f6c4b4dffc-4" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_88d11188eef44b93be2663f6c4b4dffc-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_88d11188eef44b93be2663f6c4b4dffc-5" name="rest_code_88d11188eef44b93be2663f6c4b4dffc-5" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_88d11188eef44b93be2663f6c4b4dffc-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// Dealer&lt;/span&gt;
&lt;a id="rest_code_88d11188eef44b93be2663f6c4b4dffc-6" name="rest_code_88d11188eef44b93be2663f6c4b4dffc-6" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_88d11188eef44b93be2663f6c4b4dffc-6"&gt;&lt;/a&gt;&lt;span class="nx"&gt;dealer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;zmq4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewSocket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;zmq4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DEALER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_88d11188eef44b93be2663f6c4b4dffc-7" name="rest_code_88d11188eef44b93be2663f6c4b4dffc-7" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_88d11188eef44b93be2663f6c4b4dffc-7"&gt;&lt;/a&gt;&lt;span class="nx"&gt;dealer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tcp://localhost:5555"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Use cases:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Load balancing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Asynchronous request/reply&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Complex routing topologies&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Service meshes&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="pattern-selection-guidelines"&gt;
&lt;h4&gt;Pattern Selection Guidelines&lt;/h4&gt;
&lt;p&gt;When choosing a pattern, consider:&lt;/p&gt;
&lt;p&gt;Message Flow Direction:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;One-way: Push/Pull or Pub/Sub&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Two-way: Request/Reply or Dealer/Router&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Synchronization Requirements:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Synchronous: Request/Reply&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Asynchronous: Push/Pull, Pub/Sub, Dealer/Router&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Scalability Needs:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Fan-out: Pub/Sub&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Load balancing: Push/Pull or Dealer/Router&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Both: Combination of patterns&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Message Delivery Guarantees:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;At-most-once: Pub/Sub&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At-least-once: Request/Reply&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Custom guarantees: Dealer/Router&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="example-combining-patterns"&gt;
&lt;h4&gt;Example: Combining Patterns&lt;/h4&gt;
&lt;p&gt;Here's an example combining Pub/Sub with Push/Pull for a logging system:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code go"&gt;&lt;a id="rest_code_786812ac164e451cba0ae887134335f4-1" name="rest_code_786812ac164e451cba0ae887134335f4-1" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_786812ac164e451cba0ae887134335f4-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;
&lt;a id="rest_code_786812ac164e451cba0ae887134335f4-2" name="rest_code_786812ac164e451cba0ae887134335f4-2" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_786812ac164e451cba0ae887134335f4-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_786812ac164e451cba0ae887134335f4-3" name="rest_code_786812ac164e451cba0ae887134335f4-3" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_786812ac164e451cba0ae887134335f4-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a id="rest_code_786812ac164e451cba0ae887134335f4-4" name="rest_code_786812ac164e451cba0ae887134335f4-4" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_786812ac164e451cba0ae887134335f4-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;"github.com/pebbe/zmq4"&lt;/span&gt;
&lt;a id="rest_code_786812ac164e451cba0ae887134335f4-5" name="rest_code_786812ac164e451cba0ae887134335f4-5" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_786812ac164e451cba0ae887134335f4-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;"log"&lt;/span&gt;
&lt;a id="rest_code_786812ac164e451cba0ae887134335f4-6" name="rest_code_786812ac164e451cba0ae887134335f4-6" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_786812ac164e451cba0ae887134335f4-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_786812ac164e451cba0ae887134335f4-7" name="rest_code_786812ac164e451cba0ae887134335f4-7" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_786812ac164e451cba0ae887134335f4-7"&gt;&lt;/a&gt;
&lt;a id="rest_code_786812ac164e451cba0ae887134335f4-8" name="rest_code_786812ac164e451cba0ae887134335f4-8" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_786812ac164e451cba0ae887134335f4-8"&gt;&lt;/a&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_786812ac164e451cba0ae887134335f4-9" name="rest_code_786812ac164e451cba0ae887134335f4-9" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_786812ac164e451cba0ae887134335f4-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Event publisher&lt;/span&gt;
&lt;a id="rest_code_786812ac164e451cba0ae887134335f4-10" name="rest_code_786812ac164e451cba0ae887134335f4-10" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_786812ac164e451cba0ae887134335f4-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;zmq4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewSocket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;zmq4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PUB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_786812ac164e451cba0ae887134335f4-11" name="rest_code_786812ac164e451cba0ae887134335f4-11" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_786812ac164e451cba0ae887134335f4-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tcp://*:5563"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_786812ac164e451cba0ae887134335f4-12" name="rest_code_786812ac164e451cba0ae887134335f4-12" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_786812ac164e451cba0ae887134335f4-12"&gt;&lt;/a&gt;
&lt;a id="rest_code_786812ac164e451cba0ae887134335f4-13" name="rest_code_786812ac164e451cba0ae887134335f4-13" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_786812ac164e451cba0ae887134335f4-13"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Log collector&lt;/span&gt;
&lt;a id="rest_code_786812ac164e451cba0ae887134335f4-14" name="rest_code_786812ac164e451cba0ae887134335f4-14" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_786812ac164e451cba0ae887134335f4-14"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;collector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;zmq4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewSocket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;zmq4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_786812ac164e451cba0ae887134335f4-15" name="rest_code_786812ac164e451cba0ae887134335f4-15" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_786812ac164e451cba0ae887134335f4-15"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;collector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tcp://*:5564"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_786812ac164e451cba0ae887134335f4-16" name="rest_code_786812ac164e451cba0ae887134335f4-16" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_786812ac164e451cba0ae887134335f4-16"&gt;&lt;/a&gt;
&lt;a id="rest_code_786812ac164e451cba0ae887134335f4-17" name="rest_code_786812ac164e451cba0ae887134335f4-17" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_786812ac164e451cba0ae887134335f4-17"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Worker that processes logs and publishes events&lt;/span&gt;
&lt;a id="rest_code_786812ac164e451cba0ae887134335f4-18" name="rest_code_786812ac164e451cba0ae887134335f4-18" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_786812ac164e451cba0ae887134335f4-18"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_786812ac164e451cba0ae887134335f4-19" name="rest_code_786812ac164e451cba0ae887134335f4-19" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_786812ac164e451cba0ae887134335f4-19"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;zmq4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewSocket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;zmq4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PUSH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_786812ac164e451cba0ae887134335f4-20" name="rest_code_786812ac164e451cba0ae887134335f4-20" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_786812ac164e451cba0ae887134335f4-20"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tcp://localhost:5564"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_786812ac164e451cba0ae887134335f4-21" name="rest_code_786812ac164e451cba0ae887134335f4-21" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_786812ac164e451cba0ae887134335f4-21"&gt;&lt;/a&gt;
&lt;a id="rest_code_786812ac164e451cba0ae887134335f4-22" name="rest_code_786812ac164e451cba0ae887134335f4-22" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_786812ac164e451cba0ae887134335f4-22"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;zmq4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewSocket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;zmq4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SUB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_786812ac164e451cba0ae887134335f4-23" name="rest_code_786812ac164e451cba0ae887134335f4-23" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_786812ac164e451cba0ae887134335f4-23"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tcp://localhost:5563"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_786812ac164e451cba0ae887134335f4-24" name="rest_code_786812ac164e451cba0ae887134335f4-24" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_786812ac164e451cba0ae887134335f4-24"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SetSubscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_786812ac164e451cba0ae887134335f4-25" name="rest_code_786812ac164e451cba0ae887134335f4-25" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_786812ac164e451cba0ae887134335f4-25"&gt;&lt;/a&gt;
&lt;a id="rest_code_786812ac164e451cba0ae887134335f4-26" name="rest_code_786812ac164e451cba0ae887134335f4-26" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_786812ac164e451cba0ae887134335f4-26"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Process messages...&lt;/span&gt;
&lt;a id="rest_code_786812ac164e451cba0ae887134335f4-27" name="rest_code_786812ac164e451cba0ae887134335f4-27" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_786812ac164e451cba0ae887134335f4-27"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}()&lt;/span&gt;
&lt;a id="rest_code_786812ac164e451cba0ae887134335f4-28" name="rest_code_786812ac164e451cba0ae887134335f4-28" href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/#rest_code_786812ac164e451cba0ae887134335f4-28"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This setup allows for:
- Real-time error broadcasting (Pub/Sub)
- Reliable log collection (Push/Pull)
- Scalable processing workers
- Decoupled components&lt;/p&gt;
&lt;p&gt;The choice of pattern significantly impacts your system's behavior, performance, and scalability. It's often beneficial to combine patterns to achieve more complex messaging requirements while maintaining simplicity in individual components.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;When you need a lightweight, broker-less messaging solution with good performance characteristics, ZeroMQ provides an excellent balance of features and simplicity. It's particularly valuable in scenarios where you need to quickly implement reliable inter-process or inter-thread communication without the overhead of a full message broker infrastructure.&lt;/p&gt;
&lt;p&gt;While it may not replace more robust solutions like Kafka for large-scale distributed systems, ZeroMQ fills an important niche for local and small-scale distributed messaging needs, especially when performance is a critical factor.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="useful-links"&gt;
&lt;h3&gt;Useful Links&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ZeroMQ Official Website: &lt;a class="reference external" href="https://zeromq.org/"&gt;https://zeromq.org/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ZeroMQ Documentation: &lt;a class="reference external" href="https://zeromq.org/get-started/"&gt;https://zeromq.org/get-started/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Protocol Buffers Official Website: &lt;a class="reference external" href="https://protobuf.dev/"&gt;https://protobuf.dev/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Protocol Buffers Documentation: &lt;a class="reference external" href="https://protobuf.dev/overview/"&gt;https://protobuf.dev/overview/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ZeroMQ Guide: &lt;a class="reference external" href="https://zguide.zeromq.org/"&gt;https://zguide.zeromq.org/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;</description><category>C</category><category>golang</category><category>ZeroMQ</category><guid>https://alexpacio.github.io/posts/message-exchanges-using-zeromq/</guid><pubDate>Mon, 27 Jan 2025 18:00:00 GMT</pubDate></item><item><title>Building a Lightweight Node.js Background Job Scheduler: A Practical Solution for Simple Web Applications</title><link>https://alexpacio.github.io/posts/lightweight-nodejs-background-job-scheduler/</link><dc:creator>Alessandro Bolletta</dc:creator><description>&lt;section id="building-a-lightweight-node-js-background-job-scheduler"&gt;
&lt;h2&gt;Building a Lightweight Node.js Background Job Scheduler&lt;/h2&gt;
&lt;p&gt;As developers, we often come across situations where a fully-fledged background job system, with all its bells and whistles, might be overkill for our project needs. This was the case for me when I built a custom background job scheduler in &lt;strong&gt;TypeScript&lt;/strong&gt; and &lt;strong&gt;Node.js&lt;/strong&gt;, designed to handle essential tasks without the overhead of larger, more complex solutions.&lt;/p&gt;
&lt;section id="the-need-for-a-simple-solution"&gt;
&lt;h3&gt;The Need for a Simple Solution&lt;/h3&gt;
&lt;p&gt;My project involved a web application that required periodic background tasks, such as &lt;strong&gt;data synchronization&lt;/strong&gt;, &lt;strong&gt;cleanup jobs&lt;/strong&gt;, and &lt;strong&gt;basic system monitoring&lt;/strong&gt;. While there are many mature background job frameworks available, most were too feature-heavy for what I needed. I wanted something small, efficient, and easy to integrate into my Docker-based setup, without introducing unnecessary complexity.&lt;/p&gt;
&lt;p&gt;That’s when I decided to write my own scheduler—lean, concise, and perfect for simple backend apps or as a side container to complement larger web applications.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-custom-scheduler-small-but-effective"&gt;
&lt;h3&gt;The Custom Scheduler: Small but Effective&lt;/h3&gt;
&lt;p&gt;The goal was to create a &lt;strong&gt;minimalistic background job scheduler&lt;/strong&gt; that could be easily run in a Docker container alongside the main web application. Written in &lt;strong&gt;TypeScript&lt;/strong&gt; and &lt;strong&gt;Node.js&lt;/strong&gt;, the solution is focused purely on executing periodic tasks with the least amount of code possible, while ensuring it’s flexible enough to be extended for future needs.&lt;/p&gt;
&lt;p&gt;Unlike robust job schedulers like &lt;strong&gt;Bull&lt;/strong&gt; or &lt;strong&gt;Agenda&lt;/strong&gt;, my custom scheduler strips away non-essential features and focuses on what truly matters for small applications: &lt;strong&gt;reliability and ease of use&lt;/strong&gt;. It supports scheduling jobs at specific intervals, retrying on failure, and executing scripts or commands as needed. By keeping the codebase concise, the scheduler can be easily maintained and quickly deployed.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="seamless-integration-into-docker"&gt;
&lt;h3&gt;Seamless Integration into Docker&lt;/h3&gt;
&lt;p&gt;The scheduler is designed to be packaged as a &lt;strong&gt;multi-layer Docker container&lt;/strong&gt;. This approach allows me to include all the necessary &lt;strong&gt;CLI tools and backend executables&lt;/strong&gt; in one place, ensuring that the container remains isolated but tightly integrated with the rest of the application.&lt;/p&gt;
&lt;p&gt;This makes it an ideal &lt;strong&gt;sidecar container&lt;/strong&gt; to handle tasks for a larger web application. Its small footprint ensures that it won’t introduce significant overhead, making it an excellent choice for environments where resources are limited, such as microservices architectures or smaller backend deployments.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="real-time-observability-telegram-bot-and-email-alerts"&gt;
&lt;h3&gt;Real-Time Observability: Telegram Bot and Email Alerts&lt;/h3&gt;
&lt;p&gt;One of the unique aspects of this project was adding easy &lt;strong&gt;observability&lt;/strong&gt; and &lt;strong&gt;control&lt;/strong&gt; via a &lt;strong&gt;Telegram bot&lt;/strong&gt; and &lt;strong&gt;email notifications&lt;/strong&gt;. While the scheduler itself is minimalistic, I wanted to ensure I had a convenient way to monitor job status and handle any failures without diving into logs or dashboards.&lt;/p&gt;
&lt;p&gt;The Telegram bot integration allows me to start or stop jobs, check their status, and receive instant notifications when something goes wrong. This real-time control, paired with email alerts for periodic updates or error logs, ensures I stay informed even when the jobs are running in the background.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="perfect-for-small-scale-applications"&gt;
&lt;h3&gt;Perfect for Small-Scale Applications&lt;/h3&gt;
&lt;p&gt;This background job scheduler might not have the rich feature set of other established systems, but that’s exactly why it works so well in certain scenarios. For &lt;strong&gt;smaller applications&lt;/strong&gt; or web services that don’t require a heavy-duty job queue, this solution offers a lightweight, easy-to-manage alternative. It handles the basics efficiently, making it perfect for production environments where &lt;strong&gt;simplicity&lt;/strong&gt; and &lt;strong&gt;performance&lt;/strong&gt; are crucial.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="final-thoughts"&gt;
&lt;h3&gt;Final Thoughts&lt;/h3&gt;
&lt;p&gt;Creating this custom background job scheduler has been a rewarding experience. It’s not meant to replace more feature-rich systems, but rather fill the gap for projects where adding complex tooling would be overkill. With a &lt;strong&gt;small and concise codebase&lt;/strong&gt;, seamless &lt;strong&gt;Docker integration&lt;/strong&gt;, and &lt;strong&gt;real-time observability&lt;/strong&gt; via Telegram and email, this scheduler has become an invaluable part of my workflow.&lt;/p&gt;
&lt;p&gt;If you're working on a small backend or need a side container to handle background jobs without the complexity of larger frameworks, this custom solution might be just what you're looking for.&lt;/p&gt;
&lt;p&gt;If you're tackling a similar challenge in your project, I highly recommend to have a try with the Background Job scheduler: &lt;a class="reference external" href="https://github.com/alexpacio/background-job-scheduler"&gt;https://github.com/alexpacio/background-job-scheduler&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;</description><category>Background Jobs</category><category>Docker</category><category>Node.js</category><category>Telegram</category><category>TypeScript</category><guid>https://alexpacio.github.io/posts/lightweight-nodejs-background-job-scheduler/</guid><pubDate>Thu, 10 Oct 2024 12:00:00 GMT</pubDate></item><item><title>Full-fledged API + e2e tests + benchmark + IaC + Helm charts + more as an (interesting) exercise!</title><link>https://alexpacio.github.io/posts/python-k8s-api/</link><dc:creator>Alessandro Bolletta</dc:creator><description>&lt;p&gt;Last week, I was contacted for a coding challenge. The project seemed interesting, so I decided to take it on. At the very least, I would learn something new, which I was eager to explore: Pulumi, k6, FastAPI and some fancy modern things that make you look like a cool dev!&lt;/p&gt;
&lt;p&gt;The project involved creating a simple REST API in Python, which needed to be packaged with Helm, ready for deployment in a Kubernetes (K8s) cluster, and including all the essential tools required.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;A Python REST API backend program. The choice of framework was up to me&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unit and e2e tests&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swagger/OpenAPI documentation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A CDK-like deployment script to automate the API’s dependencies: Terraform or Pulumi (for an AWS CDK-like experience). Since I was curious, I chose Pulumi&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Backend API should store its state via AWS PaaS services. Either a real AWS account or an automated way to use Localstack, a tool that simulates AWS’s APIs in your local environment, would have worked&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A Helm package to deploy the Kubernetes cluster&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Health checking mechanisms&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scripts to tie everything together, making the cluster reproducible by following a series of steps outlined in a README file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Horizontal autoscaling&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Built-in application benchmarking&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The ultimate goal is now clear: creating a self-contained package that could easily reproduce a complete, production-ready REST API backend in a cloud native and scalable setup.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here’s the result of my work: &lt;a class="reference external" href="https://github.com/alexpacio/python-webapp-boilerplate"&gt;https://github.com/alexpacio/python-webapp-boilerplate&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Although there are a few rough edges and minor aspects that I handled in a superficial way, this serves as an example of how a modern, asynchronous FastAPI backend can be delivered within a single Git repository.
I believe it's a solid boilerplate to start with, and it allowed me to explore new tools like Pulumi, FastAPI, and other recent technologies.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thoughts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Even though I feel like the entire AWS ecosystem is increasingly filling gaps (perhaps revenue gaps?) with bloat everywhere, I’ve been impressed with how concise, easy to use, develop, and reproduce a project like this can be. From this foundation, you can build a very sophisticated system while keeping everything in one place.
Additionally, you can test your AWS services locally and connect them later by simply using the Helm values file for the infrastructure or the .env file in the root folder for the application properties.&lt;/p&gt;
&lt;p&gt;As mentioned, there’s definitely room for several small adjustments to make it work seamlessly, but I think this is a very solid and complete starting point! I may have missed something important, as I dedicated only a small portion of my time to this challenge.&lt;/p&gt;
&lt;p&gt;Imagine having a temporary Kubernetes (K8s) namespace just to run your end-to-end (e2e) tests, reproducing the entire AWS PaaS stack and your application in a replicated and horizontally scalable way: you run the tests, collect the report, and then dispose of the environment.&lt;/p&gt;
&lt;p&gt;The same approach can be used for your benchmarking needs.&lt;/p&gt;
&lt;p&gt;With every change you make to your code, you can potentially test each step in your local cluster, which is automatically initialized in every aspect.&lt;/p&gt;
&lt;p&gt;Just focus on your infrastructure and application code, set your environment variable files, and your portable cluster is up and running!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Outcome&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I think I’ll continue to work on this. Cloud-native applications that avoid being locked into a specific cloud provider while still being distributed, scalable, and easy to use are possible.
I look forward to building an opinionated version of this soon. Stay tuned!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Contribute!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Feel free to use it as you wish, and let me know if you have any comments.&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;</description><category>cloud-native</category><category>fastapi</category><category>k6</category><category>k8s</category><category>kubernetes</category><category>pulumi</category><guid>https://alexpacio.github.io/posts/python-k8s-api/</guid><pubDate>Sun, 22 Sep 2024 12:19:03 GMT</pubDate></item><item><title>Hello world!</title><link>https://alexpacio.github.io/posts/hello-world/</link><dc:creator>Alessandro Bolletta</dc:creator><description>&lt;p&gt;This is my first post! I'm excited to start sharing tips on backend development, cloud computing, and more.&lt;/p&gt;</description><guid>https://alexpacio.github.io/posts/hello-world/</guid><pubDate>Sat, 21 Sep 2024 14:41:03 GMT</pubDate></item></channel></rss>