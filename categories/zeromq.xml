<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Alessandro's View (Posts about ZeroMQ)</title><link>https://alexpacio.github.io/</link><description></description><atom:link href="https://alexpacio.github.io/categories/zeromq.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2025 &lt;a href="mailto:alexpacio91 at gmail dot com"&gt;Alessandro Bolletta&lt;/a&gt; </copyright><lastBuildDate>Mon, 04 Aug 2025 13:44:05 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Exchanging messages between processes (or even threads within the same program) using ZeroMQ</title><link>https://alexpacio.github.io/posts/message-exchanges-using-zeromq/</link><dc:creator>Alessandro Bolletta</dc:creator><description>&lt;section id="inter-process-communication-with-zeromq-and-protocol-buffers"&gt;
&lt;h2&gt;Inter-Process Communication with ZeroMQ (and Protocol Buffers)&lt;/h2&gt;
&lt;section id="introduction"&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Some may certainly say that, when you are writing so called "daemons" under Linux/Unix OSes or "services" under Windows, you might want to use OS primitives/reuse existing libraries to make your programs communicate each other. And I strongly agree with the point: it is always a good idea to use a well-tested and solid library to implement such fundamental features such as message queues.&lt;/p&gt;
&lt;p&gt;For example, under Linux you can use D-Bus, which allows IPC at scale within the OS scope. Or, in the microservices space, you can leverage on message brokers like RabbitMQ or Kafka to stream your messages through sophisticated routing logic. However, at times you are just looking for something trivial and simple to send and queue messages where at the same time you look for brokerless setup but still you are willing to leverage on some of the features that message queuing systems offer for free with ease. That's where ZeroMQ comes in.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://alexpacio.github.io/posts/message-exchanges-using-zeromq/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;</description><category>C</category><category>golang</category><category>ZeroMQ</category><guid>https://alexpacio.github.io/posts/message-exchanges-using-zeromq/</guid><pubDate>Mon, 27 Jan 2025 18:00:00 GMT</pubDate></item></channel></rss>